pub use liquidator::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod liquidator {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("approvePool"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("approvePool"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("token"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("hook"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("hook"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("sender"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount0Out"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount1Out"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_data"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("liquidate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("liquidate"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateralAsset"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("debtAsset"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("user"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("debtToCover"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("swapPath"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("swapVenue"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::String,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("string"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateralGain"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Int(256usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("int256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("owner"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("owner"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("pool"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("pool"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IPool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("recover"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("recover"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("token"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("transferOwnership"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("transferOwnership"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("newOwner"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("uniswapV3SwapCallback"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "uniswapV3SwapCallback",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount0Delta"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Int(256usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("int256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount1Delta"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Int(256usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("int256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_data"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("OwnershipTransferred"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned(
                                "OwnershipTransferred",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("user"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: true,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("newOwner"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: true,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
            ]),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static LIQUIDATOR_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15`\x0EW__\xFD[P_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x90\x81\x17\x82U`@Q\x90\x91\x82\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x82\x90\xA3Pa!\xA9\x80a\0\\_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\x85W_5`\xE0\x1C\x80c\x8D\xA5\xCB[\x11a\0XW\x80c\x8D\xA5\xCB[\x14a\x01\nW\x80c\x9A{\xFFy\x14a\x01\x1CW\x80c\xF2\xFD\xE3\x8B\x14a\x01/W\x80c\xFAF\x1E3\x14a\x01BW__\xFD[\x80c\x16\xF0\x11[\x14a\0\x89W\x80c.C\xC9a\x14a\0\xC1W\x80cBL&[\x14a\0\xE2W\x80cW\x05\xAEC\x14a\0\xF7W[__\xFD[a\0\xA4s2F{C\xBF\xA6rs\xFC}\xDD\xA0\x99\x9E\xE9\xA1/*\xAA\x08\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xD4a\0\xCF6`\x04a\x1B\x85V[a\x01UV[`@Q\x90\x81R` \x01a\0\xB8V[a\0\xF5a\0\xF06`\x04a\x1C4V[a\x04\x96V[\0[a\0\xF5a\x01\x056`\x04a\x1COV[a\x05EV[_Ta\0\xA4\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\xF5a\x01*6`\x04a\x1CyV[a\x06\x19V[a\0\xF5a\x01=6`\x04a\x1C4V[a\x07\xE3V[a\0\xF5a\x01P6`\x04a\x1C\xDEV[a\x08VV[_\x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x01\x88W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x7F\x90a\x1D-V[`@Q\x80\x91\x03\x90\xFD[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R_\x90`\x01`\x01`\xA0\x1B\x03\x8B\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xCCW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xF0\x91\x90a\x1DSV[`@Qi\x06\xB6\x97GFV\xE77v\x17`\xB4\x1B` \x82\x01R\x90\x91P`*\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x84\x84`@Q` \x01a\x025\x92\x91\x90a\x1DjV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x03a\x02\xE9Wa\x02\xE4\x87`@Q\x80`\xC0\x01`@R\x80\x89\x89\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPPPPPP\x81R` \x01\x8D`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8B`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8A\x81R` \x01_\x81RPa\t\xABV[a\x04\x16V[`@Qh\x06\x87\x97\x06W'7v\x17`\xBC\x1B` \x82\x01R`)\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x84\x84`@Q` \x01a\x03*\x92\x91\x90a\x1DjV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x03a\x03\xD9Wa\x02\xE4\x87`@Q\x80`\xC0\x01`@R\x80\x89\x89\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPPPPPP\x81R` \x01\x8D`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8B`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8A\x81R` \x01_\x81RPa\x0B\xC4V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01RqInvalid swap venue`p\x1B`D\x82\x01R`d\x01a\x01\x7FV[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x81\x90`\x01`\x01`\xA0\x1B\x03\x8C\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04ZW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04~\x91\x90a\x1DSV[a\x04\x88\x91\x90a\x1D\x8DV[\x9A\x99PPPPPPPPPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x04\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x7F\x90a\x1D-V[`@Qc\t^\xA7\xB3`\xE0\x1B\x81Rs2F{C\xBF\xA6rs\xFC}\xDD\xA0\x99\x9E\xE9\xA1/*\xAA\x08`\x04\x82\x01R_\x19`$\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16\x90c\t^\xA7\xB3\x90`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\x1DW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05A\x91\x90a\x1D\xACV[PPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x05nW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x7F\x90a\x1D-V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x05\xABW`@Q3\x90\x82\x15a\x08\xFC\x02\x90\x83\x90_\x81\x81\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x05\xA6W=__>=_\xFD[PPPV[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x82\x90R`\x01`\x01`\xA0\x1B\x03\x83\x16\x90c\xA9\x05\x9C\xBB\x90`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\xF5W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xA6\x91\x90a\x1D\xACV[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x06sW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7Fmsg.sender != activeKittenPair\0\0`D\x82\x01R`d\x01a\x01\x7FV[_a\x06\x80\x82\x84\x01\x84a\x1E9V[\x90P___a\x06\x91\x84_\x01Qa\rRV[` \x87\x01Q`@\x80\x89\x01Q``\x8A\x01Q`\x80\x8B\x01Q\x92Qb\xA7\x18\xA9`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x94\x85\x16`\x04\x82\x01R\x91\x84\x16`$\x83\x01R\x92\x90\x92\x16`D\x83\x01R`d\x82\x01R_`\x84\x82\x01R\x92\x95P\x90\x93P\x91Ps2F{C\xBF\xA6rs\xFC}\xDD\xA0\x99\x9E\xE9\xA1/*\xAA\x08\x90b\xA7\x18\xA9\x90`\xA4\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x07\x1AW__\xFD[PZ\xF1\x15\x80\x15a\x07,W=__>=_\xFD[PPPPa\x07<\x84_\x01Qa\r\x91V[\x15a\x07]W\x83Qa\x07L\x90a\r\xCAV[\x84R`\xA0\x84\x01Qa\x07]\x90\x85a\t\xABV[`\xA0\x84\x01Q`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x91\x90\x91R\x91\x92P\x82\x91`\x01`\x01`\xA0\x1B\x03\x83\x16\x90c\xA9\x05\x9C\xBB\x90`D\x01[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x07\xB3W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\xD7\x91\x90a\x1D\xACV[PPPPPPPPPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x08\x0CW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x7F\x90a\x1D-V[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x82U`@Q\x90\x913\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PV[_a\x08c\x82\x84\x01\x84a\x1E9V[\x90P___a\x08t\x84_\x01Qa\rRV[\x92P\x92P\x92Pa\x08\xA2s\"\xA9\xB8*l=+\xFBh\xF3$\xB2\xE86\x7F4m\xD6\xF3*a\x08\x9D\x85\x85\x85a\x0E\x01V[a\x0EwV[` \x84\x01Q`@\x80\x86\x01Q``\x87\x01Q`\x80\x88\x01Q\x92Qb\xA7\x18\xA9`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x94\x85\x16`\x04\x82\x01R\x91\x84\x16`$\x83\x01R\x92\x90\x92\x16`D\x83\x01R`d\x82\x01R_`\x84\x82\x01Rs2F{C\xBF\xA6rs\xFC}\xDD\xA0\x99\x9E\xE9\xA1/*\xAA\x08\x90b\xA7\x18\xA9\x90`\xA4\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\t#W__\xFD[PZ\xF1\x15\x80\x15a\t5W=__>=_\xFD[PPPP__\x89\x13a\tGW\x87a\tIV[\x88[\x90Pa\tW\x85_\x01Qa\r\x91V[\x15a\tsW\x84Qa\tg\x90a\r\xCAV[\x85Ra\ts\x81\x86a\x0B\xC4V[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x82\x90R\x92\x93P\x83\x92`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c\xA9\x05\x9C\xBB\x90`D\x01a\x07\x97V[___a\t\xBA\x84_\x01Qa\rRV[`@Qc\x06\x80\x1C\xC3`\xE4\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x80\x84\x16`\x04\x83\x01\x81\x90R\x90\x85\x16`$\x83\x01\x81\x90R`\x01`D\x84\x01R\x94\x97P\x92\x95P\x90\x93P\x91\x11\x15\x90s\xDA\x12\xF4PX\nL\xC4\x85\xC3\xB5\x01\xBA\xB7\xB0\xB3\xCB\xC3\xB3\x1B\x90ch\x01\xCC0\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\nU\x91\x90a\x1FHV[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x82\x17\x90Ua\n\xB6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01Rr$\xB7;0\xB64\xB2\x105\xB4\xBA:2\xB7\x1080\xB4\xB9`i\x1B`D\x82\x01R`d\x01a\x01\x7FV[`@\x80Q`\xA0\x81\x01\x82R`\x01T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82Rs\xDA\x12\xF4PX\nL\xC4\x85\xC3\xB5\x01\xBA\xB7\xB0\xB3\xCB\xC3\xB3\x1B` \x83\x01R`\x80\x80\x89\x01Q\x93\x83\x01\x93\x90\x93R\x85\x16``\x82\x01R_\x91\x81\x01\x91\x90\x91Ra\x0B\x0F\x90a\x0E\xCBV[`\xA0\x86\x01R`\x01T`\x01`\x01`\xA0\x1B\x03\x16c\x02,\r\x9F\x82a\x0B0W\x87a\x0B2V[_[\x83a\x0B=W_a\x0B?V[\x88[0\x89`@Q` \x01a\x0BQ\x91\x90a\x1F\x91V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0B\x7F\x94\x93\x92\x91\x90a \x02V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x0B\x96W__\xFD[PZ\xF1\x15\x80\x15a\x0B\xA8W=__>=_\xFD[PP`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90UPPPPPPPPV[___a\x0B\xD3\x84_\x01Qa\rRV[\x91\x94P\x92P\x90P`\x01`\x01`\xA0\x1B\x03\x80\x84\x16\x90\x83\x16\x10_a\x0C\x12s\"\xA9\xB8*l=+\xFBh\xF3$\xB2\xE86\x7F4m\xD6\xF3*a\x0C\r\x86\x88\x87a\x0E\x01V[a\x12\xC0V[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0CPW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0Ct\x91\x90a\x1FHV[P`\x01`\x01`\xA0\x1B\x03\x81\x16c\x12\x8A\xCB\x080\x84a\x0C\x8F\x8Ba 8V[\x86a\x0C\xB8Wa\x0C\xB3`\x01s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&a RV[a\x0C\xC8V[a\x0C\xC8d\x01\0\x02v\xA3`\x01a qV[\x8B`@Q` \x01a\x0C\xD9\x91\x90a\x1F\x91V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\r\x08\x95\x94\x93\x92\x91\x90a \x90V[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\r#W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\rG\x91\x90a \xD5V[PPPPPPPPPV[_\x80\x80a\r_\x84\x82a\x13\xA6V[\x92Pa\rl\x84`\x14a\x14\nV[a\xFF\xFF\x16\x90Pa\r\x88a\r\x81`\x03`\x14a \xF7V[\x85\x90a\x13\xA6V[\x91P\x91\x93\x90\x92PV[_a\r\x9E`\x03`\x14a \xF7V[`\x14a\r\xAB`\x03\x82a \xF7V[a\r\xB5\x91\x90a \xF7V[a\r\xBF\x91\x90a \xF7V[\x82Q\x10\x15\x90P\x91\x90PV[``a\r\xFBa\r\xDB`\x03`\x14a \xF7V[a\r\xE7`\x03`\x14a \xF7V[\x84Qa\r\xF3\x91\x90a!\nV[\x84\x91\x90a\x14\xB4V[\x92\x91PPV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x82`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x11\x15a\x0E;W\x91\x92\x91[`@Q\x80``\x01`@R\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x84`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x83b\xFF\xFF\xFF\x16\x81RP\x90P[\x93\x92PPPV[_a\x0E\x82\x83\x83a\x12\xC0V[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x05\xA6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x1A[\x9D\x98[\x1AY\x08\x1C\x1B\xDB\xDB`\xA2\x1B`D\x82\x01R`d\x01a\x01\x7FV[__a\x12$\x83`@Q\x80`\xC0\x01`@R\x80\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16cD<\xB4\xBC`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\x1BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F?\x91\x90a\x1DSV[\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16cZv\xF2^`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\x83W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\xA7\x91\x90a\x1DSV[\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xEBW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\x0F\x91\x90a\x1FHV[`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10JW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10n\x91\x90a!\x1DV[`\xFF\x16\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\xB5W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\xD9\x91\x90a\x1FHV[`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\x14W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x118\x91\x90a!\x1DV[`\xFF\x16\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\x7FW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xA3\x91\x90a\x1FHV[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\xF0W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\x14\x91\x90a\x1FHV[`\x01`\x01`\xA0\x1B\x03\x16\x90Ra\x15\xC0V[` \x84\x01Q`\x80\x85\x01Q`@Qc\xCCV\xB2\xC5`\xE0\x1B\x81R0`\x04\x82\x01R\x90\x15\x15`$\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90c\xCCV\xB2\xC5\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x12zW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\x9E\x91\x90a\x1DSV[a\x12\xAA\x90a'\x10a!\nV[a\x12\xB6\x82a'\x10a!=V[a\x0Ep\x91\x90a!TV[_\x81` \x01Q`\x01`\x01`\xA0\x1B\x03\x16\x82_\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x10a\x12\xE5W__\xFD[\x81Q` \x80\x84\x01Q`@\x80\x86\x01Q\x81Q`\x01`\x01`\xA0\x1B\x03\x95\x86\x16\x81\x86\x01R\x94\x90\x92\x16\x84\x82\x01Rb\xFF\xFF\xFF\x90\x91\x16``\x80\x85\x01\x91\x90\x91R\x81Q\x80\x85\x03\x82\x01\x81R`\x80\x85\x01\x90\x92R\x81Q\x91\x90\x92\x01 `\x01`\x01`\xF8\x1B\x03\x19`\xA0\x84\x01R\x90\x85\x90\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\xA1\x83\x01R`\xB5\x82\x01R\x7F\x1E\xEDC\xDC\xAA.\xFD\xE0g.\xB5qd\x92\0\xA2\x927\xB7\x95\x8E{\x0F\xBDR\xF7_\xA3[~\xC5,`\xD5\x82\x01R`\xF5\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x93\x92PPPV[_a\x13\xB2\x82`\x14a \xF7V[\x83Q\x10\x15a\x13\xFAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01RttoAddress_outOfBounds`X\x1B`D\x82\x01R`d\x01a\x01\x7FV[P\x01` \x01Q`\x01``\x1B\x90\x04\x90V[_\x81a\x14\x17\x81`\x03a \xF7V[\x10\x15a\x14YW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01RptoUint24_overflow`x\x1B`D\x82\x01R`d\x01a\x01\x7FV[a\x14d\x82`\x03a \xF7V[\x83Q\x10\x15a\x14\xABW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01RstoUint24_outOfBounds``\x1B`D\x82\x01R`d\x01a\x01\x7FV[P\x01`\x03\x01Q\x90V[``\x81a\x14\xC2\x81`\x1Fa \xF7V[\x10\x15a\x15\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rmslice_overflow`\x90\x1B`D\x82\x01R`d\x01a\x01\x7FV[a\x15\x0B\x82\x84a \xF7V[\x84Q\x10\x15a\x15OW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rpslice_outOfBounds`x\x1B`D\x82\x01R`d\x01a\x01\x7FV[``\x82\x15\x80\x15a\x15mW`@Q\x91P_\x82R` \x82\x01`@Ra\x15\xB7V[`@Q\x91P`\x1F\x84\x16\x80\x15` \x02\x81\x84\x01\x01\x85\x81\x01\x87\x83\x15` \x02\x84\x8B\x01\x01\x01[\x81\x83\x10\x15a\x15\xA6W\x80Q\x83R` \x92\x83\x01\x92\x01a\x15\x8EV[PP\x85\x84R`\x1F\x01`\x1F\x19\x16`@RP[P\x94\x93PPPPV[_a\x15\xEE`@Q\x80`\xA0\x01`@R\x80_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81RP\x90V[\x83`\x80\x01Q\x15a\x17\xB3Wa\x16\x0F\x83_\x01Q\x84` \x01Q\x86`\x80\x01Q\x86a\x18 V[\x81R`@\x83\x01Q\x83Qa\x16*\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x164\x91\x90a!TV[\x83R``\x83\x01Q` \x84\x01Qa\x16R\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x16\\\x91\x90a!TV[` \x84\x01R`\x80\x83\x01Q``\x85\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x16\x14a\x16\x89W` \x83\x01Q\x83Qa\x16\x91V[\x82Q` \x84\x01Q[` \x83\x01R`@\x82\x01R`\x80\x83\x01Q``\x85\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x16\x14a\x16\xE2W``\x83\x01Q`@\x85\x01Qa\x16\xD3\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x16\xDD\x91\x90a!TV[a\x17\tV[\x82`@\x01Q\x84`@\x01Qg\r\xE0\xB6\xB3\xA7d\0\0a\x16\xFF\x91\x90a!=V[a\x17\t\x91\x90a!TV[``\x82\x01R`@\x80\x85\x01Q\x90\x82\x01Qa\x171\x91a\x17%\x91a!\nV[\x82Q` \x84\x01Qa\x19\x16V[\x81` \x01Qa\x17@\x91\x90a!\nV[\x81`\x80\x01\x81\x81RPPg\r\xE0\xB6\xB3\xA7d\0\0\x83`\x80\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x85``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x14a\x17}W\x83`@\x01Qa\x17\x83V[\x83``\x01Q[\x82` \x01Q\x83`\x80\x01Qa\x17\x97\x91\x90a!\nV[a\x17\xA1\x91\x90a!=V[a\x17\xAB\x91\x90a!TV[\x91PPa\r\xFBV[\x82`\x80\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x84``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x14a\x17\xE0W\x82Q` \x84\x01Qa\x17\xE8V[` \x83\x01Q\x83Q[`@\x83\x01\x81\x90R` \x83\x01\x91\x90\x91R``\x82\x01Qa\x18\x05\x91a!\nV[\x81``\x01Q\x82` \x01Qa\x17\xA1\x91\x90a!=V[P\x92\x91PPV[_\x82\x15a\x19\x01W`@\x82\x01Q_\x90a\x18@\x87g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x18J\x91\x90a!TV[\x90P_\x83``\x01Q\x86g\r\xE0\xB6\xB3\xA7d\0\0a\x18f\x91\x90a!=V[a\x18p\x91\x90a!TV[\x90P_g\r\xE0\xB6\xB3\xA7d\0\0a\x18\x86\x83\x85a!=V[a\x18\x90\x91\x90a!TV[\x90P_g\r\xE0\xB6\xB3\xA7d\0\0a\x18\xA6\x84\x80a!=V[a\x18\xB0\x91\x90a!TV[g\r\xE0\xB6\xB3\xA7d\0\0a\x18\xC3\x86\x80a!=V[a\x18\xCD\x91\x90a!TV[a\x18\xD7\x91\x90a \xF7V[\x90Pg\r\xE0\xB6\xB3\xA7d\0\0a\x18\xEC\x82\x84a!=V[a\x18\xF6\x91\x90a!TV[\x94PPPPPa\x19\x0EV[a\x19\x0B\x84\x86a!=V[\x90P[\x94\x93PPPPV[_\x80[`\xFF\x81\x10\x15a\x1A\rW\x82_a\x19.\x82\x88a\x1A\x16V[\x90P\x85\x81\x10\x15a\x19}W_a\x19C\x86\x89a\x1A\xB2V[a\x19M\x83\x89a!\nV[a\x19_\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x19i\x91\x90a!TV[\x90Pa\x19u\x81\x87a \xF7V[\x95PPa\x19\xBEV[_a\x19\x88\x86\x89a\x1A\xB2V[a\x19\x92\x88\x84a!\nV[a\x19\xA4\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x19\xAE\x91\x90a!TV[\x90Pa\x19\xBA\x81\x87a!\nV[\x95PP[\x81\x85\x11\x15a\x19\xE7W`\x01a\x19\xD2\x83\x87a!\nV[\x11a\x19\xE2W\x84\x93PPPPa\x0EpV[a\x1A\x03V[`\x01a\x19\xF3\x86\x84a!\nV[\x11a\x1A\x03W\x84\x93PPPPa\x0EpV[PP`\x01\x01a\x19\x19V[P\x90\x93\x92PPPV[_g\r\xE0\xB6\xB3\xA7d\0\0\x83\x81\x84\x81a\x1A.\x82\x80a!=V[a\x1A8\x91\x90a!TV[a\x1AB\x91\x90a!=V[a\x1AL\x91\x90a!TV[a\x1AV\x91\x90a!=V[a\x1A`\x91\x90a!TV[g\r\xE0\xB6\xB3\xA7d\0\0\x80\x85\x81a\x1Av\x82\x80a!=V[a\x1A\x80\x91\x90a!TV[a\x1A\x8A\x91\x90a!=V[a\x1A\x94\x91\x90a!TV[a\x1A\x9E\x90\x85a!=V[a\x1A\xA8\x91\x90a!TV[a\x0Ep\x91\x90a \xF7V[_g\r\xE0\xB6\xB3\xA7d\0\0\x82\x81a\x1A\xC8\x82\x80a!=V[a\x1A\xD2\x91\x90a!TV[a\x1A\xDC\x91\x90a!=V[a\x1A\xE6\x91\x90a!TV[g\r\xE0\xB6\xB3\xA7d\0\0\x80a\x1A\xFA\x86\x80a!=V[a\x1B\x04\x91\x90a!TV[a\x1B\x0F\x85`\x03a!=V[a\x1A\x9E\x91\x90a!=V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x1B-W__\xFD[PV[\x805a\x1B;\x81a\x1B\x19V[\x91\x90PV[__\x83`\x1F\x84\x01\x12a\x1BPW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1BgW__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x1B~W__\xFD[\x92P\x92\x90PV[________`\xC0\x89\x8B\x03\x12\x15a\x1B\x9CW__\xFD[\x885a\x1B\xA7\x81a\x1B\x19V[\x97P` \x89\x015a\x1B\xB7\x81a\x1B\x19V[\x96P`@\x89\x015a\x1B\xC7\x81a\x1B\x19V[\x95P``\x89\x015\x94P`\x80\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xE9W__\xFD[a\x1B\xF5\x8B\x82\x8C\x01a\x1B@V[\x90\x95P\x93PP`\xA0\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x14W__\xFD[a\x1C \x8B\x82\x8C\x01a\x1B@V[\x99\x9C\x98\x9BP\x96\x99P\x94\x97\x93\x96\x92\x95\x94PPPV[_` \x82\x84\x03\x12\x15a\x1CDW__\xFD[\x815a\x0Ep\x81a\x1B\x19V[__`@\x83\x85\x03\x12\x15a\x1C`W__\xFD[\x825a\x1Ck\x81a\x1B\x19V[\x94` \x93\x90\x93\x015\x93PPPV[_____`\x80\x86\x88\x03\x12\x15a\x1C\x8DW__\xFD[\x855a\x1C\x98\x81a\x1B\x19V[\x94P` \x86\x015\x93P`@\x86\x015\x92P``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\xC1W__\xFD[a\x1C\xCD\x88\x82\x89\x01a\x1B@V[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[____``\x85\x87\x03\x12\x15a\x1C\xF1W__\xFD[\x845\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\x15W__\xFD[a\x1D!\x87\x82\x88\x01a\x1B@V[\x95\x98\x94\x97P\x95PPPPV[` \x80\x82R`\x0C\x90\x82\x01Rk\x15S\x90UU\x12\x13\xD4\x92V\x91Q`\xA2\x1B`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a\x1DcW__\xFD[PQ\x91\x90PV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15a\x18\x19Wa\x18\x19a\x1DyV[_` \x82\x84\x03\x12\x15a\x1D\xBCW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0EpW__\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\x02Wa\x1E\x02a\x1D\xCBV[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E1Wa\x1E1a\x1D\xCBV[`@R\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1EIW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E_W__\xFD[\x82\x01`\xC0\x81\x85\x03\x12\x15a\x1EpW__\xFD[a\x1Exa\x1D\xDFV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\x8EW__\xFD[\x82\x01`\x1F\x81\x01\x86\x13a\x1E\x9EW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xB8Wa\x1E\xB8a\x1D\xCBV[a\x1E\xCB`\x1F\x82\x01`\x1F\x19\x16` \x01a\x1E\x08V[\x81\x81R\x87` \x83\x85\x01\x01\x11\x15a\x1E\xDFW__\xFD[\x81` \x84\x01` \x83\x017_` \x83\x83\x01\x01R\x80\x84RPPPa\x1F\x03` \x83\x01a\x1B0V[` \x82\x01Ra\x1F\x14`@\x83\x01a\x1B0V[`@\x82\x01Ra\x1F%``\x83\x01a\x1B0V[``\x82\x01R`\x80\x82\x81\x015\x90\x82\x01R`\xA0\x91\x82\x015\x91\x81\x01\x91\x90\x91R\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x1FXW__\xFD[\x81Qa\x0Ep\x81a\x1B\x19V[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_\x82Q`\xC0` \x84\x01Ra\x1F\xAC`\xE0\x84\x01\x82a\x1FcV[\x90P`\x01\x80`\xA0\x1B\x03` \x85\x01Q\x16`@\x84\x01R`\x01\x80`\xA0\x1B\x03`@\x85\x01Q\x16``\x84\x01R`\x01\x80`\xA0\x1B\x03``\x85\x01Q\x16`\x80\x84\x01R`\x80\x84\x01Q`\xA0\x84\x01R`\xA0\x84\x01Q`\xC0\x84\x01R\x80\x91PP\x92\x91PPV[\x84\x81R\x83` \x82\x01R`\x01\x80`\xA0\x1B\x03\x83\x16`@\x82\x01R`\x80``\x82\x01R_a .`\x80\x83\x01\x84a\x1FcV[\x96\x95PPPPPPV[_`\x01`\xFF\x1B\x82\x01a LWa La\x1DyV[P_\x03\x90V[`\x01`\x01`\xA0\x1B\x03\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\r\xFBWa\r\xFBa\x1DyV[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\r\xFBWa\r\xFBa\x1DyV[`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x82R\x85\x15\x15` \x83\x01R`@\x82\x01\x85\x90R\x83\x16``\x82\x01R`\xA0`\x80\x82\x01\x81\x90R_\x90a \xCA\x90\x83\x01\x84a\x1FcV[\x97\x96PPPPPPPV[__`@\x83\x85\x03\x12\x15a \xE6W__\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x80\x82\x01\x80\x82\x11\x15a\r\xFBWa\r\xFBa\x1DyV[\x81\x81\x03\x81\x81\x11\x15a\r\xFBWa\r\xFBa\x1DyV[_` \x82\x84\x03\x12\x15a!-W__\xFD[\x81Q`\xFF\x81\x16\x81\x14a\x0EpW__\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\r\xFBWa\r\xFBa\x1DyV[_\x82a!nWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V\xFE\xA2dipfsX\"\x12 \xDF\xC1\xA6^Z\xCCk*\xCC\x90\x95\x96)u\xC5\x9C.Z*\x14Am\xF3\xE4\x0F\xED\x80YsS\xEB\xF5dsolcC\0\x08\x1C\x003";
    /// The bytecode of the contract.
    pub static LIQUIDATOR_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\x85W_5`\xE0\x1C\x80c\x8D\xA5\xCB[\x11a\0XW\x80c\x8D\xA5\xCB[\x14a\x01\nW\x80c\x9A{\xFFy\x14a\x01\x1CW\x80c\xF2\xFD\xE3\x8B\x14a\x01/W\x80c\xFAF\x1E3\x14a\x01BW__\xFD[\x80c\x16\xF0\x11[\x14a\0\x89W\x80c.C\xC9a\x14a\0\xC1W\x80cBL&[\x14a\0\xE2W\x80cW\x05\xAEC\x14a\0\xF7W[__\xFD[a\0\xA4s2F{C\xBF\xA6rs\xFC}\xDD\xA0\x99\x9E\xE9\xA1/*\xAA\x08\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xD4a\0\xCF6`\x04a\x1B\x85V[a\x01UV[`@Q\x90\x81R` \x01a\0\xB8V[a\0\xF5a\0\xF06`\x04a\x1C4V[a\x04\x96V[\0[a\0\xF5a\x01\x056`\x04a\x1COV[a\x05EV[_Ta\0\xA4\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\xF5a\x01*6`\x04a\x1CyV[a\x06\x19V[a\0\xF5a\x01=6`\x04a\x1C4V[a\x07\xE3V[a\0\xF5a\x01P6`\x04a\x1C\xDEV[a\x08VV[_\x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x01\x88W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x7F\x90a\x1D-V[`@Q\x80\x91\x03\x90\xFD[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R_\x90`\x01`\x01`\xA0\x1B\x03\x8B\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xCCW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xF0\x91\x90a\x1DSV[`@Qi\x06\xB6\x97GFV\xE77v\x17`\xB4\x1B` \x82\x01R\x90\x91P`*\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x84\x84`@Q` \x01a\x025\x92\x91\x90a\x1DjV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x03a\x02\xE9Wa\x02\xE4\x87`@Q\x80`\xC0\x01`@R\x80\x89\x89\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPPPPPP\x81R` \x01\x8D`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8B`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8A\x81R` \x01_\x81RPa\t\xABV[a\x04\x16V[`@Qh\x06\x87\x97\x06W'7v\x17`\xBC\x1B` \x82\x01R`)\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x84\x84`@Q` \x01a\x03*\x92\x91\x90a\x1DjV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x03a\x03\xD9Wa\x02\xE4\x87`@Q\x80`\xC0\x01`@R\x80\x89\x89\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPPPPPP\x81R` \x01\x8D`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8B`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8A\x81R` \x01_\x81RPa\x0B\xC4V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01RqInvalid swap venue`p\x1B`D\x82\x01R`d\x01a\x01\x7FV[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x81\x90`\x01`\x01`\xA0\x1B\x03\x8C\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04ZW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04~\x91\x90a\x1DSV[a\x04\x88\x91\x90a\x1D\x8DV[\x9A\x99PPPPPPPPPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x04\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x7F\x90a\x1D-V[`@Qc\t^\xA7\xB3`\xE0\x1B\x81Rs2F{C\xBF\xA6rs\xFC}\xDD\xA0\x99\x9E\xE9\xA1/*\xAA\x08`\x04\x82\x01R_\x19`$\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16\x90c\t^\xA7\xB3\x90`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\x1DW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05A\x91\x90a\x1D\xACV[PPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x05nW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x7F\x90a\x1D-V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x05\xABW`@Q3\x90\x82\x15a\x08\xFC\x02\x90\x83\x90_\x81\x81\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x05\xA6W=__>=_\xFD[PPPV[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x82\x90R`\x01`\x01`\xA0\x1B\x03\x83\x16\x90c\xA9\x05\x9C\xBB\x90`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\xF5W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xA6\x91\x90a\x1D\xACV[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x06sW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7Fmsg.sender != activeKittenPair\0\0`D\x82\x01R`d\x01a\x01\x7FV[_a\x06\x80\x82\x84\x01\x84a\x1E9V[\x90P___a\x06\x91\x84_\x01Qa\rRV[` \x87\x01Q`@\x80\x89\x01Q``\x8A\x01Q`\x80\x8B\x01Q\x92Qb\xA7\x18\xA9`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x94\x85\x16`\x04\x82\x01R\x91\x84\x16`$\x83\x01R\x92\x90\x92\x16`D\x83\x01R`d\x82\x01R_`\x84\x82\x01R\x92\x95P\x90\x93P\x91Ps2F{C\xBF\xA6rs\xFC}\xDD\xA0\x99\x9E\xE9\xA1/*\xAA\x08\x90b\xA7\x18\xA9\x90`\xA4\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x07\x1AW__\xFD[PZ\xF1\x15\x80\x15a\x07,W=__>=_\xFD[PPPPa\x07<\x84_\x01Qa\r\x91V[\x15a\x07]W\x83Qa\x07L\x90a\r\xCAV[\x84R`\xA0\x84\x01Qa\x07]\x90\x85a\t\xABV[`\xA0\x84\x01Q`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x91\x90\x91R\x91\x92P\x82\x91`\x01`\x01`\xA0\x1B\x03\x83\x16\x90c\xA9\x05\x9C\xBB\x90`D\x01[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x07\xB3W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\xD7\x91\x90a\x1D\xACV[PPPPPPPPPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x08\x0CW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\x7F\x90a\x1D-V[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x82U`@Q\x90\x913\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PV[_a\x08c\x82\x84\x01\x84a\x1E9V[\x90P___a\x08t\x84_\x01Qa\rRV[\x92P\x92P\x92Pa\x08\xA2s\"\xA9\xB8*l=+\xFBh\xF3$\xB2\xE86\x7F4m\xD6\xF3*a\x08\x9D\x85\x85\x85a\x0E\x01V[a\x0EwV[` \x84\x01Q`@\x80\x86\x01Q``\x87\x01Q`\x80\x88\x01Q\x92Qb\xA7\x18\xA9`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x94\x85\x16`\x04\x82\x01R\x91\x84\x16`$\x83\x01R\x92\x90\x92\x16`D\x83\x01R`d\x82\x01R_`\x84\x82\x01Rs2F{C\xBF\xA6rs\xFC}\xDD\xA0\x99\x9E\xE9\xA1/*\xAA\x08\x90b\xA7\x18\xA9\x90`\xA4\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\t#W__\xFD[PZ\xF1\x15\x80\x15a\t5W=__>=_\xFD[PPPP__\x89\x13a\tGW\x87a\tIV[\x88[\x90Pa\tW\x85_\x01Qa\r\x91V[\x15a\tsW\x84Qa\tg\x90a\r\xCAV[\x85Ra\ts\x81\x86a\x0B\xC4V[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x82\x90R\x92\x93P\x83\x92`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c\xA9\x05\x9C\xBB\x90`D\x01a\x07\x97V[___a\t\xBA\x84_\x01Qa\rRV[`@Qc\x06\x80\x1C\xC3`\xE4\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x80\x84\x16`\x04\x83\x01\x81\x90R\x90\x85\x16`$\x83\x01\x81\x90R`\x01`D\x84\x01R\x94\x97P\x92\x95P\x90\x93P\x91\x11\x15\x90s\xDA\x12\xF4PX\nL\xC4\x85\xC3\xB5\x01\xBA\xB7\xB0\xB3\xCB\xC3\xB3\x1B\x90ch\x01\xCC0\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\nU\x91\x90a\x1FHV[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x82\x17\x90Ua\n\xB6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01Rr$\xB7;0\xB64\xB2\x105\xB4\xBA:2\xB7\x1080\xB4\xB9`i\x1B`D\x82\x01R`d\x01a\x01\x7FV[`@\x80Q`\xA0\x81\x01\x82R`\x01T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82Rs\xDA\x12\xF4PX\nL\xC4\x85\xC3\xB5\x01\xBA\xB7\xB0\xB3\xCB\xC3\xB3\x1B` \x83\x01R`\x80\x80\x89\x01Q\x93\x83\x01\x93\x90\x93R\x85\x16``\x82\x01R_\x91\x81\x01\x91\x90\x91Ra\x0B\x0F\x90a\x0E\xCBV[`\xA0\x86\x01R`\x01T`\x01`\x01`\xA0\x1B\x03\x16c\x02,\r\x9F\x82a\x0B0W\x87a\x0B2V[_[\x83a\x0B=W_a\x0B?V[\x88[0\x89`@Q` \x01a\x0BQ\x91\x90a\x1F\x91V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0B\x7F\x94\x93\x92\x91\x90a \x02V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x0B\x96W__\xFD[PZ\xF1\x15\x80\x15a\x0B\xA8W=__>=_\xFD[PP`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90UPPPPPPPPV[___a\x0B\xD3\x84_\x01Qa\rRV[\x91\x94P\x92P\x90P`\x01`\x01`\xA0\x1B\x03\x80\x84\x16\x90\x83\x16\x10_a\x0C\x12s\"\xA9\xB8*l=+\xFBh\xF3$\xB2\xE86\x7F4m\xD6\xF3*a\x0C\r\x86\x88\x87a\x0E\x01V[a\x12\xC0V[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0CPW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0Ct\x91\x90a\x1FHV[P`\x01`\x01`\xA0\x1B\x03\x81\x16c\x12\x8A\xCB\x080\x84a\x0C\x8F\x8Ba 8V[\x86a\x0C\xB8Wa\x0C\xB3`\x01s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&a RV[a\x0C\xC8V[a\x0C\xC8d\x01\0\x02v\xA3`\x01a qV[\x8B`@Q` \x01a\x0C\xD9\x91\x90a\x1F\x91V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\r\x08\x95\x94\x93\x92\x91\x90a \x90V[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\r#W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\rG\x91\x90a \xD5V[PPPPPPPPPV[_\x80\x80a\r_\x84\x82a\x13\xA6V[\x92Pa\rl\x84`\x14a\x14\nV[a\xFF\xFF\x16\x90Pa\r\x88a\r\x81`\x03`\x14a \xF7V[\x85\x90a\x13\xA6V[\x91P\x91\x93\x90\x92PV[_a\r\x9E`\x03`\x14a \xF7V[`\x14a\r\xAB`\x03\x82a \xF7V[a\r\xB5\x91\x90a \xF7V[a\r\xBF\x91\x90a \xF7V[\x82Q\x10\x15\x90P\x91\x90PV[``a\r\xFBa\r\xDB`\x03`\x14a \xF7V[a\r\xE7`\x03`\x14a \xF7V[\x84Qa\r\xF3\x91\x90a!\nV[\x84\x91\x90a\x14\xB4V[\x92\x91PPV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x82`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x11\x15a\x0E;W\x91\x92\x91[`@Q\x80``\x01`@R\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x84`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x83b\xFF\xFF\xFF\x16\x81RP\x90P[\x93\x92PPPV[_a\x0E\x82\x83\x83a\x12\xC0V[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x05\xA6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x1A[\x9D\x98[\x1AY\x08\x1C\x1B\xDB\xDB`\xA2\x1B`D\x82\x01R`d\x01a\x01\x7FV[__a\x12$\x83`@Q\x80`\xC0\x01`@R\x80\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16cD<\xB4\xBC`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\x1BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F?\x91\x90a\x1DSV[\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16cZv\xF2^`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\x83W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\xA7\x91\x90a\x1DSV[\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xEBW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\x0F\x91\x90a\x1FHV[`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10JW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10n\x91\x90a!\x1DV[`\xFF\x16\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\xB5W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\xD9\x91\x90a\x1FHV[`\x01`\x01`\xA0\x1B\x03\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\x14W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x118\x91\x90a!\x1DV[`\xFF\x16\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\x7FW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xA3\x91\x90a\x1FHV[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x86_\x01Q`\x01`\x01`\xA0\x1B\x03\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\xF0W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\x14\x91\x90a\x1FHV[`\x01`\x01`\xA0\x1B\x03\x16\x90Ra\x15\xC0V[` \x84\x01Q`\x80\x85\x01Q`@Qc\xCCV\xB2\xC5`\xE0\x1B\x81R0`\x04\x82\x01R\x90\x15\x15`$\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90c\xCCV\xB2\xC5\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x12zW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\x9E\x91\x90a\x1DSV[a\x12\xAA\x90a'\x10a!\nV[a\x12\xB6\x82a'\x10a!=V[a\x0Ep\x91\x90a!TV[_\x81` \x01Q`\x01`\x01`\xA0\x1B\x03\x16\x82_\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x10a\x12\xE5W__\xFD[\x81Q` \x80\x84\x01Q`@\x80\x86\x01Q\x81Q`\x01`\x01`\xA0\x1B\x03\x95\x86\x16\x81\x86\x01R\x94\x90\x92\x16\x84\x82\x01Rb\xFF\xFF\xFF\x90\x91\x16``\x80\x85\x01\x91\x90\x91R\x81Q\x80\x85\x03\x82\x01\x81R`\x80\x85\x01\x90\x92R\x81Q\x91\x90\x92\x01 `\x01`\x01`\xF8\x1B\x03\x19`\xA0\x84\x01R\x90\x85\x90\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\xA1\x83\x01R`\xB5\x82\x01R\x7F\x1E\xEDC\xDC\xAA.\xFD\xE0g.\xB5qd\x92\0\xA2\x927\xB7\x95\x8E{\x0F\xBDR\xF7_\xA3[~\xC5,`\xD5\x82\x01R`\xF5\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x93\x92PPPV[_a\x13\xB2\x82`\x14a \xF7V[\x83Q\x10\x15a\x13\xFAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01RttoAddress_outOfBounds`X\x1B`D\x82\x01R`d\x01a\x01\x7FV[P\x01` \x01Q`\x01``\x1B\x90\x04\x90V[_\x81a\x14\x17\x81`\x03a \xF7V[\x10\x15a\x14YW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01RptoUint24_overflow`x\x1B`D\x82\x01R`d\x01a\x01\x7FV[a\x14d\x82`\x03a \xF7V[\x83Q\x10\x15a\x14\xABW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01RstoUint24_outOfBounds``\x1B`D\x82\x01R`d\x01a\x01\x7FV[P\x01`\x03\x01Q\x90V[``\x81a\x14\xC2\x81`\x1Fa \xF7V[\x10\x15a\x15\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rmslice_overflow`\x90\x1B`D\x82\x01R`d\x01a\x01\x7FV[a\x15\x0B\x82\x84a \xF7V[\x84Q\x10\x15a\x15OW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rpslice_outOfBounds`x\x1B`D\x82\x01R`d\x01a\x01\x7FV[``\x82\x15\x80\x15a\x15mW`@Q\x91P_\x82R` \x82\x01`@Ra\x15\xB7V[`@Q\x91P`\x1F\x84\x16\x80\x15` \x02\x81\x84\x01\x01\x85\x81\x01\x87\x83\x15` \x02\x84\x8B\x01\x01\x01[\x81\x83\x10\x15a\x15\xA6W\x80Q\x83R` \x92\x83\x01\x92\x01a\x15\x8EV[PP\x85\x84R`\x1F\x01`\x1F\x19\x16`@RP[P\x94\x93PPPPV[_a\x15\xEE`@Q\x80`\xA0\x01`@R\x80_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81RP\x90V[\x83`\x80\x01Q\x15a\x17\xB3Wa\x16\x0F\x83_\x01Q\x84` \x01Q\x86`\x80\x01Q\x86a\x18 V[\x81R`@\x83\x01Q\x83Qa\x16*\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x164\x91\x90a!TV[\x83R``\x83\x01Q` \x84\x01Qa\x16R\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x16\\\x91\x90a!TV[` \x84\x01R`\x80\x83\x01Q``\x85\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x16\x14a\x16\x89W` \x83\x01Q\x83Qa\x16\x91V[\x82Q` \x84\x01Q[` \x83\x01R`@\x82\x01R`\x80\x83\x01Q``\x85\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x16\x14a\x16\xE2W``\x83\x01Q`@\x85\x01Qa\x16\xD3\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x16\xDD\x91\x90a!TV[a\x17\tV[\x82`@\x01Q\x84`@\x01Qg\r\xE0\xB6\xB3\xA7d\0\0a\x16\xFF\x91\x90a!=V[a\x17\t\x91\x90a!TV[``\x82\x01R`@\x80\x85\x01Q\x90\x82\x01Qa\x171\x91a\x17%\x91a!\nV[\x82Q` \x84\x01Qa\x19\x16V[\x81` \x01Qa\x17@\x91\x90a!\nV[\x81`\x80\x01\x81\x81RPPg\r\xE0\xB6\xB3\xA7d\0\0\x83`\x80\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x85``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x14a\x17}W\x83`@\x01Qa\x17\x83V[\x83``\x01Q[\x82` \x01Q\x83`\x80\x01Qa\x17\x97\x91\x90a!\nV[a\x17\xA1\x91\x90a!=V[a\x17\xAB\x91\x90a!TV[\x91PPa\r\xFBV[\x82`\x80\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x84``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x14a\x17\xE0W\x82Q` \x84\x01Qa\x17\xE8V[` \x83\x01Q\x83Q[`@\x83\x01\x81\x90R` \x83\x01\x91\x90\x91R``\x82\x01Qa\x18\x05\x91a!\nV[\x81``\x01Q\x82` \x01Qa\x17\xA1\x91\x90a!=V[P\x92\x91PPV[_\x82\x15a\x19\x01W`@\x82\x01Q_\x90a\x18@\x87g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x18J\x91\x90a!TV[\x90P_\x83``\x01Q\x86g\r\xE0\xB6\xB3\xA7d\0\0a\x18f\x91\x90a!=V[a\x18p\x91\x90a!TV[\x90P_g\r\xE0\xB6\xB3\xA7d\0\0a\x18\x86\x83\x85a!=V[a\x18\x90\x91\x90a!TV[\x90P_g\r\xE0\xB6\xB3\xA7d\0\0a\x18\xA6\x84\x80a!=V[a\x18\xB0\x91\x90a!TV[g\r\xE0\xB6\xB3\xA7d\0\0a\x18\xC3\x86\x80a!=V[a\x18\xCD\x91\x90a!TV[a\x18\xD7\x91\x90a \xF7V[\x90Pg\r\xE0\xB6\xB3\xA7d\0\0a\x18\xEC\x82\x84a!=V[a\x18\xF6\x91\x90a!TV[\x94PPPPPa\x19\x0EV[a\x19\x0B\x84\x86a!=V[\x90P[\x94\x93PPPPV[_\x80[`\xFF\x81\x10\x15a\x1A\rW\x82_a\x19.\x82\x88a\x1A\x16V[\x90P\x85\x81\x10\x15a\x19}W_a\x19C\x86\x89a\x1A\xB2V[a\x19M\x83\x89a!\nV[a\x19_\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x19i\x91\x90a!TV[\x90Pa\x19u\x81\x87a \xF7V[\x95PPa\x19\xBEV[_a\x19\x88\x86\x89a\x1A\xB2V[a\x19\x92\x88\x84a!\nV[a\x19\xA4\x90g\r\xE0\xB6\xB3\xA7d\0\0a!=V[a\x19\xAE\x91\x90a!TV[\x90Pa\x19\xBA\x81\x87a!\nV[\x95PP[\x81\x85\x11\x15a\x19\xE7W`\x01a\x19\xD2\x83\x87a!\nV[\x11a\x19\xE2W\x84\x93PPPPa\x0EpV[a\x1A\x03V[`\x01a\x19\xF3\x86\x84a!\nV[\x11a\x1A\x03W\x84\x93PPPPa\x0EpV[PP`\x01\x01a\x19\x19V[P\x90\x93\x92PPPV[_g\r\xE0\xB6\xB3\xA7d\0\0\x83\x81\x84\x81a\x1A.\x82\x80a!=V[a\x1A8\x91\x90a!TV[a\x1AB\x91\x90a!=V[a\x1AL\x91\x90a!TV[a\x1AV\x91\x90a!=V[a\x1A`\x91\x90a!TV[g\r\xE0\xB6\xB3\xA7d\0\0\x80\x85\x81a\x1Av\x82\x80a!=V[a\x1A\x80\x91\x90a!TV[a\x1A\x8A\x91\x90a!=V[a\x1A\x94\x91\x90a!TV[a\x1A\x9E\x90\x85a!=V[a\x1A\xA8\x91\x90a!TV[a\x0Ep\x91\x90a \xF7V[_g\r\xE0\xB6\xB3\xA7d\0\0\x82\x81a\x1A\xC8\x82\x80a!=V[a\x1A\xD2\x91\x90a!TV[a\x1A\xDC\x91\x90a!=V[a\x1A\xE6\x91\x90a!TV[g\r\xE0\xB6\xB3\xA7d\0\0\x80a\x1A\xFA\x86\x80a!=V[a\x1B\x04\x91\x90a!TV[a\x1B\x0F\x85`\x03a!=V[a\x1A\x9E\x91\x90a!=V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x1B-W__\xFD[PV[\x805a\x1B;\x81a\x1B\x19V[\x91\x90PV[__\x83`\x1F\x84\x01\x12a\x1BPW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1BgW__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x1B~W__\xFD[\x92P\x92\x90PV[________`\xC0\x89\x8B\x03\x12\x15a\x1B\x9CW__\xFD[\x885a\x1B\xA7\x81a\x1B\x19V[\x97P` \x89\x015a\x1B\xB7\x81a\x1B\x19V[\x96P`@\x89\x015a\x1B\xC7\x81a\x1B\x19V[\x95P``\x89\x015\x94P`\x80\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xE9W__\xFD[a\x1B\xF5\x8B\x82\x8C\x01a\x1B@V[\x90\x95P\x93PP`\xA0\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x14W__\xFD[a\x1C \x8B\x82\x8C\x01a\x1B@V[\x99\x9C\x98\x9BP\x96\x99P\x94\x97\x93\x96\x92\x95\x94PPPV[_` \x82\x84\x03\x12\x15a\x1CDW__\xFD[\x815a\x0Ep\x81a\x1B\x19V[__`@\x83\x85\x03\x12\x15a\x1C`W__\xFD[\x825a\x1Ck\x81a\x1B\x19V[\x94` \x93\x90\x93\x015\x93PPPV[_____`\x80\x86\x88\x03\x12\x15a\x1C\x8DW__\xFD[\x855a\x1C\x98\x81a\x1B\x19V[\x94P` \x86\x015\x93P`@\x86\x015\x92P``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\xC1W__\xFD[a\x1C\xCD\x88\x82\x89\x01a\x1B@V[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[____``\x85\x87\x03\x12\x15a\x1C\xF1W__\xFD[\x845\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\x15W__\xFD[a\x1D!\x87\x82\x88\x01a\x1B@V[\x95\x98\x94\x97P\x95PPPPV[` \x80\x82R`\x0C\x90\x82\x01Rk\x15S\x90UU\x12\x13\xD4\x92V\x91Q`\xA2\x1B`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a\x1DcW__\xFD[PQ\x91\x90PV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15a\x18\x19Wa\x18\x19a\x1DyV[_` \x82\x84\x03\x12\x15a\x1D\xBCW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0EpW__\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\x02Wa\x1E\x02a\x1D\xCBV[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E1Wa\x1E1a\x1D\xCBV[`@R\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1EIW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E_W__\xFD[\x82\x01`\xC0\x81\x85\x03\x12\x15a\x1EpW__\xFD[a\x1Exa\x1D\xDFV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\x8EW__\xFD[\x82\x01`\x1F\x81\x01\x86\x13a\x1E\x9EW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xB8Wa\x1E\xB8a\x1D\xCBV[a\x1E\xCB`\x1F\x82\x01`\x1F\x19\x16` \x01a\x1E\x08V[\x81\x81R\x87` \x83\x85\x01\x01\x11\x15a\x1E\xDFW__\xFD[\x81` \x84\x01` \x83\x017_` \x83\x83\x01\x01R\x80\x84RPPPa\x1F\x03` \x83\x01a\x1B0V[` \x82\x01Ra\x1F\x14`@\x83\x01a\x1B0V[`@\x82\x01Ra\x1F%``\x83\x01a\x1B0V[``\x82\x01R`\x80\x82\x81\x015\x90\x82\x01R`\xA0\x91\x82\x015\x91\x81\x01\x91\x90\x91R\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x1FXW__\xFD[\x81Qa\x0Ep\x81a\x1B\x19V[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_\x82Q`\xC0` \x84\x01Ra\x1F\xAC`\xE0\x84\x01\x82a\x1FcV[\x90P`\x01\x80`\xA0\x1B\x03` \x85\x01Q\x16`@\x84\x01R`\x01\x80`\xA0\x1B\x03`@\x85\x01Q\x16``\x84\x01R`\x01\x80`\xA0\x1B\x03``\x85\x01Q\x16`\x80\x84\x01R`\x80\x84\x01Q`\xA0\x84\x01R`\xA0\x84\x01Q`\xC0\x84\x01R\x80\x91PP\x92\x91PPV[\x84\x81R\x83` \x82\x01R`\x01\x80`\xA0\x1B\x03\x83\x16`@\x82\x01R`\x80``\x82\x01R_a .`\x80\x83\x01\x84a\x1FcV[\x96\x95PPPPPPV[_`\x01`\xFF\x1B\x82\x01a LWa La\x1DyV[P_\x03\x90V[`\x01`\x01`\xA0\x1B\x03\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\r\xFBWa\r\xFBa\x1DyV[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\r\xFBWa\r\xFBa\x1DyV[`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x82R\x85\x15\x15` \x83\x01R`@\x82\x01\x85\x90R\x83\x16``\x82\x01R`\xA0`\x80\x82\x01\x81\x90R_\x90a \xCA\x90\x83\x01\x84a\x1FcV[\x97\x96PPPPPPPV[__`@\x83\x85\x03\x12\x15a \xE6W__\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x80\x82\x01\x80\x82\x11\x15a\r\xFBWa\r\xFBa\x1DyV[\x81\x81\x03\x81\x81\x11\x15a\r\xFBWa\r\xFBa\x1DyV[_` \x82\x84\x03\x12\x15a!-W__\xFD[\x81Q`\xFF\x81\x16\x81\x14a\x0EpW__\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\r\xFBWa\r\xFBa\x1DyV[_\x82a!nWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V\xFE\xA2dipfsX\"\x12 \xDF\xC1\xA6^Z\xCCk*\xCC\x90\x95\x96)u\xC5\x9C.Z*\x14Am\xF3\xE4\x0F\xED\x80YsS\xEB\xF5dsolcC\0\x08\x1C\x003";
    /// The deployed bytecode of the contract.
    pub static LIQUIDATOR_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct Liquidator<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Liquidator<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Liquidator<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Liquidator<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Liquidator<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(Liquidator)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Liquidator<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    LIQUIDATOR_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                LIQUIDATOR_ABI.clone(),
                LIQUIDATOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `approvePool` (0x424c265b) function
        pub fn approve_pool(
            &self,
            token: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([66, 76, 38, 91], token)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `hook` (0x9a7bff79) function
        pub fn hook(
            &self,
            sender: ::ethers::core::types::Address,
            amount_0_out: ::ethers::core::types::U256,
            amount_1_out: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [154, 123, 255, 121],
                    (sender, amount_0_out, amount_1_out, data),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `liquidate` (0x2e43c961) function
        pub fn liquidate(
            &self,
            collateral_asset: ::ethers::core::types::Address,
            debt_asset: ::ethers::core::types::Address,
            user: ::ethers::core::types::Address,
            debt_to_cover: ::ethers::core::types::U256,
            swap_path: ::ethers::core::types::Bytes,
            swap_venue: ::std::string::String,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::I256> {
            self.0
                .method_hash(
                    [46, 67, 201, 97],
                    (
                        collateral_asset,
                        debt_asset,
                        user,
                        debt_to_cover,
                        swap_path,
                        swap_venue,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `pool` (0x16f0115b) function
        pub fn pool(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([22, 240, 17, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `recover` (0x5705ae43) function
        pub fn recover(
            &self,
            token: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([87, 5, 174, 67], (token, amount))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uniswapV3SwapCallback` (0xfa461e33) function
        pub fn uniswap_v3_swap_callback(
            &self,
            amount_0_delta: ::ethers::core::types::I256,
            amount_1_delta: ::ethers::core::types::I256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 70, 30, 51], (amount_0_delta, amount_1_delta, data))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferredFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferredFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Liquidator<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub user: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `approvePool` function with signature `approvePool(address)` and selector `0x424c265b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "approvePool", abi = "approvePool(address)")]
    pub struct ApprovePoolCall {
        pub token: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `hook` function with signature `hook(address,uint256,uint256,bytes)` and selector `0x9a7bff79`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "hook", abi = "hook(address,uint256,uint256,bytes)")]
    pub struct HookCall {
        pub sender: ::ethers::core::types::Address,
        pub amount_0_out: ::ethers::core::types::U256,
        pub amount_1_out: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `liquidate` function with signature `liquidate(address,address,address,uint256,bytes,string)` and selector `0x2e43c961`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "liquidate",
        abi = "liquidate(address,address,address,uint256,bytes,string)"
    )]
    pub struct LiquidateCall {
        pub collateral_asset: ::ethers::core::types::Address,
        pub debt_asset: ::ethers::core::types::Address,
        pub user: ::ethers::core::types::Address,
        pub debt_to_cover: ::ethers::core::types::U256,
        pub swap_path: ::ethers::core::types::Bytes,
        pub swap_venue: ::std::string::String,
    }
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `pool` function with signature `pool()` and selector `0x16f0115b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "pool", abi = "pool()")]
    pub struct PoolCall;
    ///Container type for all input parameters for the `recover` function with signature `recover(address,uint256)` and selector `0x5705ae43`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "recover", abi = "recover(address,uint256)")]
    pub struct RecoverCall {
        pub token: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `uniswapV3SwapCallback` function with signature `uniswapV3SwapCallback(int256,int256,bytes)` and selector `0xfa461e33`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "uniswapV3SwapCallback",
        abi = "uniswapV3SwapCallback(int256,int256,bytes)"
    )]
    pub struct UniswapV3SwapCallbackCall {
        pub amount_0_delta: ::ethers::core::types::I256,
        pub amount_1_delta: ::ethers::core::types::I256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum LiquidatorCalls {
        ApprovePool(ApprovePoolCall),
        Hook(HookCall),
        Liquidate(LiquidateCall),
        Owner(OwnerCall),
        Pool(PoolCall),
        Recover(RecoverCall),
        TransferOwnership(TransferOwnershipCall),
        UniswapV3SwapCallback(UniswapV3SwapCallbackCall),
    }
    impl ::ethers::core::abi::AbiDecode for LiquidatorCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <ApprovePoolCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ApprovePool(decoded));
            }
            if let Ok(decoded) = <HookCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Hook(decoded));
            }
            if let Ok(decoded) = <LiquidateCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Liquidate(decoded));
            }
            if let Ok(decoded) = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Owner(decoded));
            }
            if let Ok(decoded) = <PoolCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Pool(decoded));
            }
            if let Ok(decoded) = <RecoverCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Recover(decoded));
            }
            if let Ok(decoded) = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::TransferOwnership(decoded));
            }
            if let Ok(decoded) = <UniswapV3SwapCallbackCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::UniswapV3SwapCallback(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for LiquidatorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::ApprovePool(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Hook(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Liquidate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Owner(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Pool(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Recover(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::TransferOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UniswapV3SwapCallback(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for LiquidatorCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::ApprovePool(element) => ::core::fmt::Display::fmt(element, f),
                Self::Hook(element) => ::core::fmt::Display::fmt(element, f),
                Self::Liquidate(element) => ::core::fmt::Display::fmt(element, f),
                Self::Owner(element) => ::core::fmt::Display::fmt(element, f),
                Self::Pool(element) => ::core::fmt::Display::fmt(element, f),
                Self::Recover(element) => ::core::fmt::Display::fmt(element, f),
                Self::TransferOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::UniswapV3SwapCallback(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<ApprovePoolCall> for LiquidatorCalls {
        fn from(value: ApprovePoolCall) -> Self {
            Self::ApprovePool(value)
        }
    }
    impl ::core::convert::From<HookCall> for LiquidatorCalls {
        fn from(value: HookCall) -> Self {
            Self::Hook(value)
        }
    }
    impl ::core::convert::From<LiquidateCall> for LiquidatorCalls {
        fn from(value: LiquidateCall) -> Self {
            Self::Liquidate(value)
        }
    }
    impl ::core::convert::From<OwnerCall> for LiquidatorCalls {
        fn from(value: OwnerCall) -> Self {
            Self::Owner(value)
        }
    }
    impl ::core::convert::From<PoolCall> for LiquidatorCalls {
        fn from(value: PoolCall) -> Self {
            Self::Pool(value)
        }
    }
    impl ::core::convert::From<RecoverCall> for LiquidatorCalls {
        fn from(value: RecoverCall) -> Self {
            Self::Recover(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipCall> for LiquidatorCalls {
        fn from(value: TransferOwnershipCall) -> Self {
            Self::TransferOwnership(value)
        }
    }
    impl ::core::convert::From<UniswapV3SwapCallbackCall> for LiquidatorCalls {
        fn from(value: UniswapV3SwapCallbackCall) -> Self {
            Self::UniswapV3SwapCallback(value)
        }
    }
    ///Container type for all return fields from the `liquidate` function with signature `liquidate(address,address,address,uint256,bytes,string)` and selector `0x2e43c961`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LiquidateReturn {
        pub collateral_gain: ::ethers::core::types::I256,
    }
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `pool` function with signature `pool()` and selector `0x16f0115b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PoolReturn(pub ::ethers::core::types::Address);
}
